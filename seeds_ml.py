# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cWptE4M5AHldsi9O15kKnIRg75Q0eyoZ
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

cols = ['area', 'perimeter', 'compactness', 'length', 'width', 'asymmetry', 'groove', 'class']
df = pd.read_csv("seeds_dataset.txt", names=cols, sep="\s+") #"any spaces will be recognised as the data separater"

df.head()

#visualizing the data (pretending that we dont have access to class)
for i in range(len(cols)-1):
  for j in range(i+1, len(cols)-1):  #we use a nested loop to check the relationship of each component with every other component
    x_label = cols[i]
    y_label = cols[j]
    sns.scatterplot(x=x_label, y = y_label, data=df, hue='class') #hue sepereates the 3 different classes into 3 different heaps (remember we are using principal component analysis for this project)
    plt.show()

"""# Clustering"""

from sklearn.cluster import KMeans

# x and y refer to the 2 chosen features for this exercise, not x and y in the sense of feature and target
x = 'perimeter'
y = 'asymmetry'
X = df[[x, y]].values

kmeans = KMeans(n_clusters = 3).fit(X)

clusters = kmeans.labels_

clusters

df['class'].values

cluster_df = pd.DataFrame(np.hstack((X, clusters.reshape(-1, 1))), columns = [x, y, "class"])

#KMeans classes
sns.scatterplot(x=x, y=y, hue='class', data=cluster_df)
plt.plot()

#Original classes
sns.scatterplot(x=x, y=y, hue='class', data=df)
plt.plot()

"""# Higer Dimensions"""

X = df[cols[:-1]].values

kmeans = KMeans(n_clusters = 3).fit(X)
cluster_df = pd.DataFrame(np.hstack((X, clusters.reshape(-1, 1))), columns = df.columns)

#KMeans classes
sns.scatterplot(x=x, y=y, hue='class', data=cluster_df)
plt.plot()

"""# PCA"""

from sklearn.decomposition import PCA

pca = PCA(n_components=2)
transformed_x = pca.fit_transform(X)

X.shape #210 samples with 7 dimensions

transformed_x.shape # 210 samples with 2 dimensions

transformed_x[:5]

plt.scatter(transformed_x[:,0], transformed_x[:,1])
plt.show()

kmeans_pca_df = pd.DataFrame(np.hstack((transformed_x, kmeans.labels_.reshape(-1, 1))), columns=['pca1', 'pca2', 'class'])

truth_pca_df = pd.DataFrame(np.hstack((transformed_x, df['class'].values.reshape(-1, 1))), columns=['pca1', 'pca2', 'class'])

#KMeans classes
sns.scatterplot(x='pca1', y='pca2', hue='class', data=kmeans_pca_df)
plt.plot()

#Truth classes
sns.scatterplot(x='pca1', y='pca2', hue='class', data= truth_pca_df)
plt.plot()

